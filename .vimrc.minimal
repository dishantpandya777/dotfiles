" Indicate that vim should run our plugins and always use syntax highlighting for all identified file types
" set nocompatible | filetype indent plugin on | syn on
set nocompatible 

" Setting up Vundle -- the vim plugin bundler -- and another plugin management tool that I will demonstrate
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

Bundle 'https://github.com/ChrisYip/Better-CSS-Syntax-for-Vim.git'
Bundle 'https://github.com/Lokaltog/vim-easymotion.git'
Bundle 'https://github.com/MarcWeber/vim-addon-mw-utils'
Bundle 'https://github.com/Raimondi/delimitMate.git'
Bundle 'https://github.com/SirVer/ultisnips.git'
Bundle 'https://github.com/Valloric/ListToggle.git'
Bundle 'https://github.com/Valloric/MatchTagAlways.git'
Bundle 'https://github.com/Valloric/YouCompleteMe.git'
Bundle 'https://github.com/Wolfy87/vim-enmasse.git'
Bundle 'https://github.com/airblade/vim-gitgutter.git'
Bundle 'https://github.com/amiorin/ctrlp-z.git'
Bundle 'https://github.com/bling/vim-airline.git'
Bundle 'https://github.com/chrisbra/csv.vim.git'
Bundle 'https://github.com/dterei/VimBookmarking.git'
Bundle 'https://github.com/ervandew/ag.git'
Bundle 'https://github.com/ervandew/supertab.git'
Bundle 'https://github.com/freitass/todo.txt-vim.git'
Bundle 'https://github.com/godlygeek/tabular.git'
Bundle 'https://github.com/gorodinskiy/vim-coloresque.git'
Bundle 'https://github.com/gregsexton/gitv.git'
Bundle 'https://github.com/henrik/vim-qargs.git'
Bundle 'https://github.com/honza/vim-snippets'
Bundle 'https://github.com/int3/vim-extradite.git'
Bundle 'https://github.com/joeytwiddle/sexy_scroller.vim.git'
Bundle 'https://github.com/justinmk/vim-sneak.git'

Bundle 'https://github.com/kablamo/vim-git-log.git'
Bundle 'https://github.com/kien/ctrlp.vim.git'
Bundle 'https://github.com/kshenoy/vim-signature.git'
Bundle 'https://github.com/lervag/vim-latex.git'
Bundle 'https://github.com/majutsushi/tagbar'

" THE PROBLEM IS HERE!!!

" Bundle 'https://github.com/mattn/emmet-vim.git'
Bundle 'https://github.com/mbadran/headlights.git'
Bundle 'https://github.com/nathanaelkane/vim-indent-guides'

Bundle 'https://github.com/osyo-manga/vim-over.git'
Bundle 'https://github.com/scrooloose/nerdtree.git'
" Bundle 'https://github.com/scrooloose/syntastic.git'
Bundle 'https://github.com/sjl/gundo.vim.git'
Bundle 'https://github.com/tejr/nextag.git'
Bundle 'https://github.com/terryma/vim-multiple-cursors.git'
Bundle 'https://github.com/timcharper/wordnet.vim.git'
Bundle 'https://github.com/tomtom/tlib_vim'
Bundle 'https://github.com/tpope/vim-abolish.git'
Bundle 'https://github.com/tpope/vim-fugitive.git'

" THESE ARE FINE


Bundle 'https://github.com/tpope/vim-liquid.git'
Bundle 'https://github.com/tpope/vim-ragtag.git'
Bundle 'https://github.com/tpope/vim-surround.git'
Bundle 'https://github.com/tpope/vim-unimpaired.git'
Bundle 'https://github.com/tsaleh/vim-matchit.git'
Bundle 'https://github.com/vim-scripts/AutoTag.git'
Bundle 'https://github.com/vim-scripts/HTML-AutoCloseTag.git'
Bundle 'https://github.com/vim-scripts/SQLComplete.vim.git'
Bundle 'https://github.com/vim-scripts/SyntaxAttr.vim.git' 
Bundle 'https://github.com/vim-scripts/TeX-9.git'
" Bundle 'https://github.com/vim-scripts/tComment.git'
Bundle 'https://github.com/xolox/vim-easytags.git'
Bundle 'https://github.com/xolox/vim-misc.git'
Bundle 'https://github.com/tomtom/tcomment_vim.git'

" These are all of the Bundles that we use to enhance the behavior of Vim

Bundle 'https://github.com/LaTeX-Box-Team/LaTeX-Box.git'

if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

filetype indent plugin on 

" Set the completion function for a variety of different file types
autocmd FileType tex set omnifunc=latex#complete#omnifunc 

" Set the completion function in general if there is not a specific type
set omnifunc=syntaxcomplete#Complete

" Set up a dictionary so that I can do word completion by looking up words!
set dictionary-=/usr/share/dict/american-english
set dictionary+=/usr/share/dict/american-english

" Set the encoding to utf 8, the most common encoding used for text
set encoding=utf-8

" set the hybrid color scheme for vim running in the terminal window
" let g:hybrid_use_Xresources = 1
colorscheme hybrid

" define some commands for wrapping and not wrapping a line or paragraph
command Wrap set textwidth=120
command NoWrap set textwidth=0
command StandardWrap set textwidth=80



" change the mapleader from \ to , -- this makes it easier to perform compilation in LaTeX 
let maplocalleader=","
let mapleader=","

" " Latex Box Plugin that is useful for editing LaTeX in Vim; note that the first line is the one that 
" " enables the using of forward and inverse skimming with Vim and Evince (you must use synctex)

let g:LatexBox_latexmk_options="-pdf -pdflatex='pdflatex -file-line-error -synctex=1'"
let g:LatexBox_output_type="pdf"
let g:Tex_MultipleCompileFormats = 'pdf'
let g:Tex_CompileRule_pdf = 'latexmk -pdf $*'
let g:Tex_DefaultTargetFormat='pdf'
let Tex_FoldedSections=""
let Tex_FoldedEnvironments=""
let Tex_FoldedMisc=""
let g:LatexBox_autojump=1
let g:LatexBox_show_warnings=0 " don't show all of the warnings in latex compilation, great for the issta paper
let g:LatexBox_latexmk_async=1 " handles the weird screen flashing issue with compilation and other errors






" Turn on smart indentation with the LaTeX-Box plugin, nice and very helpful
set smartindent










" note that menu provides a substantially better configuration for viewing
" the autocompletion output that is available in gvim
set cot=menu
set completeopt=longest,menuone

" start using the wildmenu to complete different commands in command-mode
set wildmenu
set wildmode=longest:full,full



set nowrap        " don't wrap lines
set wrap          " go ahead and allow the wrapping of long lines to take place 
set linebreak     " make sure that you break the lines in a way that preserves words
set showbreak=━━  " set an ellipse character so that you can tell when lines are wrapped
set tabstop=4     " a tab is four spaces
set expandtab    " insert spaces whenever the tab key is pressed, helps with formatting Java code
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set ignorecase    " ignore case when searching
set infercase     " predict the case that is needed when doing auto completion
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
" set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000  " remember more commands and search history
set undolevels=1000 " use many muchos levels of undo
set pastetoggle=<F2> " allow vim to paste a large amount of source code or tex
set timeout timeoutlen=1000 ttimeoutlen=10 " make the escape key function faster in the terminal window
set whichwrap+=<,>,h,l,[,] " wrap when you get to the end of a line and you are using the arrow keys

" turn on spell checking so that I can do this for Latex documents
set spell spelllang=en_us,en_gb
set mousemodel=popup

" Stop vim from redrawing the screen during complex operations, supposed to make the user interface much smoother, let's try!                 
" set lazyredraw
" set synmaxcol=145
" syntax sync minlines=256
set nocursorcolumn
set nocursorline
set ttyfast

" Set up the enter key to ensure that after completing words a return is not pressed

inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
            \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <tab> pumvisible() ? '<tab>' :
            \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
 























IP
